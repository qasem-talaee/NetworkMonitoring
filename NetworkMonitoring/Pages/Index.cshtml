@page
@model NetworkMonitoring.UI.Pages.IndexModel
@{
    ViewData["Title"] = "Network Monitoring";
}

<style>
    li {
        list-style: none;
        font-size: 1rem !important;
    }

    .col-3 {
        width: 23rem !important;
    }

    img{
        width: 70% !important;
    }

    .bg-green {
        background: rgb(188,245,172);
        background: linear-gradient(90deg, rgba(188,245,172,1) 0%, rgba(57,255,94,1) 27%);
    }

    .bg-red {
        background-color: rgba(255, 153, 153, 1);
        background-image: linear-gradient(90deg, rgba(255, 153, 153, 1) 0%, rgba(255, 60, 60, 1) 100%);
    }

    .bg-title-nonPing {
        background-color: rgba(179, 0, 0, 1);
        background-image: linear-gradient(90deg, rgba(179, 0, 0, 1) 50%, rgba(200, 53, 53, 1) 70%);
    }

    .bg-title-Ping {
        background-color: rgba(16, 121, 2, 1);
        background-image: linear-gradient(90deg, rgba(16, 121, 2, 1) 50%, rgba(65, 148, 56, 1) 70%);
    }

    .bg-card-nonping {
        background-color: rgba(160, 4, 4, 1);
        background-image: linear-gradient(90deg, rgba(160, 4, 4, 1) 0%, rgba(200, 4, 4, 1) 50%);
    }

    .bg-card-ping {
        background-color: rgba(27, 169, 8, 1);
        background-image: linear-gradient(90deg,rgba(32, 132, 19, 1) 0%, rgba(27, 169, 8, 1) 50%);
    }

    .badgeAnimate {
        transform: scale(1);
        animation: pulse 4s infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(0.95);
            box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);
        }

        70% {
            transform: scale(1);
            box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
        }

        100% {
            transform: scale(0.95);
            box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
        }
    }
</style>

<div id="IndexUIDiv">
    <div class="row m-4">
        <!--Row #1-->
        <div class="row border border-dark border-opacity-25 shadow rounded-5" v-if="EquipmentList.filter(x => x.Status == false).length != 0">
            <div class="text-center border bg-title-nonPing rounded-5">
                <div class="text-white fw-bold mt-1 mb-1">Without Ping</div>
            </div>
            <div class="row justify-content-center text-center py-3 pe-3 gap-4">
                <!-- card info 1 -->
                <div class="col-3" v-for="item in EquipmentList.filter(x => x.Status == false)">
                    <div class="bg-card-nonping shadow p-3 bg-body-tertiary rounded badgeAnimate" style="max-width:auto;">
                        <div class="row gap-0 align-items-center">
                            <div class="col-5">
                                <img v-bind:src="item.EquipmentType.EquipmentTypeImage" class="img-fluid" alt="image-card">
                            </div>
                            <div class="col-7">
                                <div class="rounded-end-1">
                                    <ul class="text-end text-white fs-6">
                                        <li dir="ltr"><i class="fa-regular fa-input-text"></i> <span class="fw-bold">{{ item.EquipmentIPName }}</span></li>
                                        <li dir="ltr"><i class="fa-solid fa-network-wired"></i> <span class="fw-bold">{{ item.IPAddress }}</span></li>
                                        <li dir="ltr"><i class="fa-solid fa-location-crosshairs"></i> <span>{{ item.EquipmentLocation.EquipmentLocationName }}</span></li>
                                        <li dir="ltr"><i class="fa-solid fa-list"></i> <span>{{ item.EquipmentType.EquipmentTypeName }}</span></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <!--Row #2-->
        <div class="row">
            <div class="col border border-dark border-opacity-25 shadow mt-5 rounded-5 m-1 pb-3" v-for="type in TypeList">
                <div class="text-center border bg-title-Ping rounded-5">
                    <div class="text-white fw-bold mt-1 mb-1">{{ type.EquipmentTypeName }}</div>
                </div>
                <div class="row justify-content-center text-center mt-2 mx-2 gap-3">
                    <!-- card info 1 -->
                    <div class="row" v-for="item in EquipmentList.filter(x => x.EquipmentTypeID == type.EquipmentTypeID && x.Status).sort((a, b) => parseFloat(a.Ping) - parseFloat(b.Ping)).reverse()">
                        <div class="bg-card-ping shadow p-3 bg-body-tertiary rounded" style="max-width:auto;">
                            <div class="row gap-0 align-items-center">
                                <div class="col-5">
                                    <img v-bind:src="item.EquipmentType.EquipmentTypeImage" class="img-fluid" alt="image-card">
                                </div>
                                <div class="col-7">
                                    <div class="rounded-end-1">
                                        <ul class="text-end text-white">
                                            <li dir="ltr"><i class="fa-regular fa-input-text"></i> <span class="fw-bold">{{ item.EquipmentIPName }}</span></li>
                                            <li dir="ltr"><i class="fa-solid fa-network-wired"></i> <span class="fw-bold">{{ item.IPAddress }}</span></li>
                                            <li dir="ltr"><i class="fa-solid fa-location-crosshairs"></i> <span>{{ item.EquipmentLocation.EquipmentLocationName }}</span></li>
                                            <li dir="ltr"><i class="fa-solid fa-list"></i> <span>{{ item.EquipmentType.EquipmentTypeName }}</span></li>
                                            <li dir="ltr"><i class="fa-solid fa-signal-bars"></i> <span> {{ item.Ping }}</span></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

    </div>
</div>

<script>
    const IndexUI = {
        data() {
            return {
                EquipmentList: [],
                TypeList: [],
            }
        },
        mounted() {
            this.GetAllType()
        },
        methods: {
            GetAllEquipment() {
                axios.get("/Service/EquipmentIPAll").
                    then(res => {
                        this.EquipmentList = res.data;
                    });
            },//------
            GetAllType() {
                axios.get("/BasicData/EquipmentTypeAll").
                    then(res => {
                        this.TypeList = res.data;
                        this.GetAllEquipment();
                    });
            },//------
            GetPing() {
                for (let i = 0; i < this.EquipmentList.length; i++) {
                    axios.get("/Service/EquipmentGetPing/" + this.EquipmentList[i].IPAddress).
                        then(res => {
                            this.EquipmentList.filter(x => x.EquipmentIPID == res.data.EquipmentIPID)[0].Status = res.data.Status;
                            this.EquipmentList.filter(x => x.EquipmentIPID == res.data.EquipmentIPID)[0].Ping = res.data.Ping;
                        });
                }
            },//------
        },
    };

    VueObj = Vue.createApp(IndexUI).mount("#IndexUIDiv");
    setInterval(VueObj.GetPing, 20000);
</script>